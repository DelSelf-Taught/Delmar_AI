import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LogisticRegression  # Mudado para classificação
from sklearn.pipeline import Pipeline
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler

# Carregar dados e converter para DataFrame para facilitar visualização
iris = load_iris()
X = iris.data
y = iris.target

# Criar DataFrame para visualização
import pandas as pd
df = pd.DataFrame(X, columns=iris.feature_names)
df['species'] = y
df['species'] = df['species'].map({0: iris.target_names[0], 
                                  1: iris.target_names[1], 
                                  2: iris.target_names[2]})

# Dividir dados
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Pipeline de pré-processamento: normalização + PCA
scaler = StandardScaler()
pca = PCA(n_components=2)

# Pré-processar os dados
X_train_scaled = scaler.fit_transform(X_train)
X_train_pca = pca.fit_transform(X_train_scaled)

# Aplicar modelo de classificação nos dados transformados
model = LogisticRegression(max_iter=200)  # Usando regressão logística para classificação
model.fit(X_train_pca, y_train)

# Plotar os resultados do PCA coloridos pelas classes
plt.figure(figsize=(10, 6))
scatter = plt.scatter(X_train_pca[:, 0], X_train_pca[:, 1], c=y_train, cmap='viridis')
plt.title('PCA of Iris Dataset (Training Set)')
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.legend(handles=scatter.legend_elements()[0], 
           labels=iris.target_names.tolist(),
           title='Species')
plt.show()

# Plot pairplot do dataset original
sns.pairplot(df, hue='species', palette='viridis')
plt.suptitle('Pairplot of Iris Dataset', y=1.02)
plt.show()

# Informações sobre o modelo
print(f"Acurácia no treino: {model.score(X_train_pca, y_train):.2f}")
